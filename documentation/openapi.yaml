openapi: 3.0.0
info:
  title: PDF App API
  description: API for managing users, authentication, history, and PDF operations.
  version: 1.0.0
servers:
  - url: https://node35.webte.fei.stuba.sk/pdf_app/api/v0

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: User ID
        username:
          type: string
          description: Username
        email:
          type: string
          format: email
          description: Email address
        role:
          type: string
          description: User role (e.g., user, admin)
        api_key:
          type: string
          description: The user's persistent API key (returned during login/registration/regeneration)
        created_at:
          type: string
          format: date-time
          description: User creation timestamp

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User's username
        password:
          type: string
          description: User's password

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          description: Login success message
        user_id:
          type: integer
          description: User ID
        username:
          type: string
          description: Username
        role:
          type: string
          description: User role
        api_key:
          type: string
          description: User's API key

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User's username
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          description: Registration success message
        user_id:
          type: integer
          description: User ID
        username:
          type: string
          description: Username
        email:
          type: string
          description: Email address
        api_key:
          type: string
          description: User's API key

    RegenerateApiKeyResponse:
      type: object
      properties:
        message:
          type: string
          description: Message indicating API key regeneration status.
        api_key:
          type: string
          description: The newly generated API key.

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Error message

    HistoryEntry:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Log entry ID
        username:
          type: string
          description: Username of the user
        user_id:
          type: integer
          format: int64
          description: User ID
        action:
          type: string
          description: Action performed
        details:
          type: string
          description: Action details
        ip_address:
          type: string
          description: IP address
        city:
          type: string
          description: City
        country:
          type: string
          description: Country
        created_at:
          type: string
          format: date-time
          description: Timestamp

paths:
  /login:
    post:
      summary: User login
      tags:
        - User Management
      description: Authenticates a user using username and password. Returns user details and API key on success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request (e.g., missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed (invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /register:
    post:
      summary: User registration
      tags:
        - User Management
      description: Registers a new user. Requires username, email, and password. Returns new user details and API key on success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200': # api.php returns 200 on success
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request (e.g., missing fields, invalid email, empty fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: User logout
      tags:
        - User Management
      description: Invalidates the user's session. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Logout success message
        '400':
          description: Bad request (e.g., user not logged in based on session)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /regenerate-api-key:
    post:
      summary: Regenerate API key
      tags:
        - User Management
      description: Regenerates the API key for the authenticated user. Requires API Key authentication.
      security:
        - ApiKeyAuth: []

      responses:
        '200':
          description: Successful API key regeneration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegenerateApiKeyResponse'
        '400':
          description: Bad request (e.g., missing user ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to regenerate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/{user_id}:
    get:
      summary: Get user data by ID
      tags:
        - User Management
      description: Retrieves user data by ID. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /history:
    get:
      summary: Get user history
      tags:
        - User Management
      description: Retrieves user activity history with optional filters. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of history entries to return
          schema:
            type: integer
            default: 100
            minimum: 1
        - name: offset
          in: query
          description: Offset for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: user_id
          in: query
          description: Filter by User ID
          schema:
            type: integer
        - name: action
          in: query
          description: Filter by action type
          schema:
            type: string
        - name: access_type
          in: query
          description: Filter by access type (frontend or api)
          schema:
            type: string
        - name: date_from
          in: query
          description: Filter by date from (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: Filter by date to (YYYY-MM-DD)
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryEntry'
        '400':
          description: Bad request (e.g., invalid parameter format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /delete-all-history:
    delete: 
      summary: Delete all user history
      tags:
        - User Management
      description: Deletes all activity history logs. Requires API Key authentication and Admin role.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: History deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403': # Use 403 for forbidden access due to role
          description: Forbidden (User is not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., database error during deletion)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ----- PDF Methods Endpoints -----

  /merge-pdf:
    post:
      summary: Merge PDFs
      tags:
        - PDF Methods
      description: Merges multiple PDF files into a single PDF. Returns the merged PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  minItems: 2
                  description: The PDF files to merge.
      responses:
        '200':
          description: Successful PDF merge. Returns the merged PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary # Represents the file content
        '400':
          description: Bad request (e.g., no files uploaded, less than 2 files)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to merge, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /delete-pages:
    post:
      summary: Delete Pages from PDF
      tags:
        - PDF Methods
      description: Deletes specified pages from a PDF file. Returns the modified PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - pages
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to modify.
                pages:
                  type: string
                  description: Comma-separated page numbers and ranges to delete (e.g., "1,3,5-7"). 1-based indexing.
      responses:
        '200':
          description: Successful deletion of pages. Returns the modified PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded, missing pages parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to delete, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reorder-pages:
    post:
      summary: Reorder PDF Pages
      tags:
        - PDF Methods
      description: Reorders the pages of a PDF file according to a specified order. Returns the modified PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - order
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to reorder pages.
                order:
                  type: string
                  description: Comma-separated list of page numbers in the desired order (e.g., "3,1,2,4"). 1-based indexing.
      responses:
        '200':
          description: Successful reordering of pages. Returns the modified PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded, missing order parameter, invalid order format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to reorder, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rotate-pages:
    post:
      summary: Rotate PDF Pages
      tags:
        - PDF Methods
      description: Rotates all pages of a PDF file by a specified angle. Returns the modified PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - rotation
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to rotate.
                rotation:
                  type: integer
                  description: The rotation angle in degrees (90, 180, or 270).
                  enum: [90, 180, 270]
      responses:
        '200':
          description: Successful PDF rotation. Returns the modified PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded, missing rotation parameter, invalid rotation value)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to rotate, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /extract-pages:
    post:
      summary: Extract Pages from PDF
      tags:
        - PDF Methods
      description: Extracts specified pages from a PDF file into a single new PDF. Returns the new PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - pages
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to extract pages from.
                pages:
                  type: string
                  description: Comma-separated page numbers and ranges to extract (e.g., "1,3,5-7"). 1-based indexing.
      responses:
        '200':
          description: Successful extraction of pages. Returns the new PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded, missing pages parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to extract, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /add-watermark:
    post:
      summary: Add Text Watermark to PDF
      tags:
        - PDF Methods
      description: Adds a text watermark to a PDF file. Returns the modified PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - text
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to watermark.
                text:
                  type: string
                  description: The watermark text.
      responses:
        '200':
          description: Successful PDF watermarking. Returns the modified PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded, missing text parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to watermark, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /compress-pdf:
    post:
      summary: Compress PDF
      tags:
        - PDF Methods
      description: Compresses a PDF file. Returns the compressed PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to compress.
      responses:
        '200':
          description: Successful PDF compression. Returns the compressed PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to compress, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /images-to-pdf:
    post:
      summary: Convert Images to PDF
      tags:
        - PDF Methods
      description: Converts multiple image files into a single PDF. Returns the resulting PDF file as a download. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - images
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  minItems: 1
                  description: The image files to convert.
      responses:
        '200':
          description: Successful image to PDF conversion. Returns the converted PDF file.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no images uploaded)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to convert, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /split-pdf:
    post:
      summary: Split PDF
      tags:
        - PDF Methods
      description: Splits a PDF file into two parts at a specified page number and returns a ZIP archive containing the two resulting PDFs. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - split_page
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to split.
                split_page:
                  type: integer
                  description: The 1-based page number to split after. The first output will be pages 1 to split_page, the second will be split_page + 1 to the end.
                  minimum: 1
      responses:
        '200':
          description: Successful PDF split. Returns a ZIP file containing the two split PDFs.
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., no file uploaded, missing split_page, invalid split_page number/range)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to split, Python script error, failed to create ZIP)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pdf-to-text:
    post:
      summary: Convert PDF to Text
      tags:
        - PDF Methods
      description: Extracts text from a PDF file. Returns the extracted text in a JSON response. Requires API Key authentication.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to extract text from.
      responses:
        '200':
          description: Successful text extraction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  text:
                    type: string
                    description: The extracted text from the PDF.
        '400':
          description: Bad request (e.g., no file uploaded)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (API Key missing or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to extract text, Python script error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'